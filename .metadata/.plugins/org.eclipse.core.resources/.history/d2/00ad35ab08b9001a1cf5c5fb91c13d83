package com.swarm.admin;

import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

import com.swarm.admin.service.SysMenuService;
import com.swarm.base.dao.SysUserDao;
import com.swarm.base.entity.SysMenu;

@Configuration
public class CustomWebSecurityConfig extends WebSecurityConfigurerAdapter implements WebMvcConfigurer{
	
	@Autowired
	private SysMenuService sysMenuService;
	
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		List<SysMenu> sysMenus = sysMenuService.getAllMenus();
		ExpressionUrlAuthorizationConfigurer<HttpSecurity>.ExpressionInterceptUrlRegistry express = http
		.csrf().disable()
			.authorizeRequests();
		express.antMatchers("/favicon.ico","/login/captcha","/actuator","/actuator/**","/html/**").permitAll();
//		express.antMatchers("/bususer/page").hasAuthority("menu_page");
//		express.antMatchers("/bususer/validUsername").hasAuthority("menu_validUsername");
//		sysMenus.stream()
//			.filter(m -> m.getUrl()!=null)
//			.forEach(m -> express.antMatchers(m.getUrl()).hasAuthority(m.getKey()));
			express.anyRequest().fullyAuthenticated();

			express.and()
			.exceptionHandling()
				.accessDeniedPage("/login/accessDenied")
			.and()
			.formLogin()
				.loginProcessingUrl("/login")
				.loginPage("/login/unauthorized")
				.failureForwardUrl("/login/failure")
//				.failureUrl("/login/failure")
				.successForwardUrl("/login/success")
				.permitAll()
			.and()
			.logout()
				.logoutUrl("/login/logout")
				.logoutSuccessUrl("/login/logout")
				.invalidateHttpSession(true)
//			.and()
//			.httpBasic()
				;
	}
	
	@Bean
	public UserDetailsService customUserDetailsService(SysUserDao sysUserDao) {
		return new CustomUserDetailsService(sysUserDao);
	}
	
	@Bean
	public BCryptPasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}

	@Override
	public void addCorsMappings(CorsRegistry registry) {
		registry.addMapping("/**").allowedOrigins("http://localhost:9527").allowCredentials(true)
//		.allowedOrigins("http://localhost:9527","http://localhost:9528")
		;
	}
	
	@Bean
	FilterRegistrationBean<CustomFilter> customFilterRegistrationBean(){
		FilterRegistrationBean<CustomFilter> bean = new FilterRegistrationBean<CustomFilter>(new CustomFilter());
		bean.addServletNames("customFilter");
		bean.addUrlPatterns("/","/**","/*");
		bean.setEnabled(true);
		bean.setOrder(-1);
		return bean;
	}
	
//	  new BCryptPasswordEncoder();
//	  System.out.println(passwordEncoder.encode("123456")); }r
//		  AtomicInteger atomicInteger = new AtomicInteger(0);
//		  ExecutorService executorService = Executors.newFixedThreadPool(10);
//		  for (int i = 0; i < 20; i++) {
//			  executorService.execute(() -> {
//				  System.out.println(atomicInteger.incrementAndGet());
//			  });
//		  }
//	}
	
}
